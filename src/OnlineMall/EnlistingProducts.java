/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OnlineMall;

import java.awt.Desktop;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author flossycat
 */
public class EnlistingProducts extends javax.swing.JFrame {
ArrayList <Products> products;
int reserved=1;
    /**
     * Creates new form EnlistingProducts
     */
    public EnlistingProducts() {
        initComponents();
         products = new ArrayList<Products>(6);
          populateArrayList5();
    }

    
     public void populateArrayList5()
    {
        try
        {
        
            FileInputStream file = new FileInputStream("src\\DataBase\\Products.dat");
            ObjectInputStream inputFile = new ObjectInputStream(file);
        boolean endOfFile = false;
        
        while (!endOfFile){
            
            try 
            {
              products.add((Products) inputFile.readObject());
                
            }
            catch (EOFException e)
            {
                endOfFile = true;
            }
            catch (Exception f)
            {
             JOptionPane.showMessageDialog(null, f.getMessage());
            }
        }
        
        inputFile.close();
        }
        catch (IOException e){
            
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
        
        
    }
    
    public void saveProductsToFile(){
         
            try 
            {
              FileOutputStream file = new FileOutputStream("src\\DataBase\\Products.dat");
              ObjectOutputStream outputFile = new ObjectOutputStream(file);
                
              
              for (int i=0; i<products.size(); i++){
                  
                  outputFile.writeObject(products.get(i));
                  
              }
              
              outputFile.close();
              JOptionPane.showMessageDialog(null, "The Product was succefully Enlisted");
             
            }
        
         catch (IOException e){
            
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
        
    }
  
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProductNameText = new javax.swing.JTextField();
        PriceTagText = new javax.swing.JTextField();
        StockText = new javax.swing.JTextField();
        DiscriptionText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        view = new javax.swing.JButton();
        Enlist = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(420, 470));
        setPreferredSize(new java.awt.Dimension(344, 420));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(ProductNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 224, -1));
        getContentPane().add(PriceTagText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 224, -1));
        getContentPane().add(StockText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 260, 224, -1));

        DiscriptionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscriptionTextActionPerformed(evt);
            }
        });
        getContentPane().add(DiscriptionText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, 224, -1));

        jLabel1.setText("ProductName:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 90, 10));

        jLabel2.setText("Price Tag:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 80, -1));

        jLabel3.setText("Stock:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 60, -1));

        jLabel4.setText("Discription:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 80, -1));

        view.setText("View Enlisted Products ");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        getContentPane().add(view, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 340, -1, -1));

        Enlist.setText("Enlist Product");
        Enlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnlistActionPerformed(evt);
            }
        });
        getContentPane().add(Enlist, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 380, 143, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OnlineMall/logo.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 160, 160));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnlistActionPerformed

       
        
   switch (reserved){
       
       case 1:
           
       JOptionPane.showMessageDialog(null, "Please Upload A photo for the product in JPG format only");
       
       
       JFileChooser F = new JFileChooser();
int result = F.showOpenDialog(null);

if (result != JFileChooser.APPROVE_OPTION) {
    System.exit(0);
}

String Path = F.getSelectedFile().getAbsolutePath();


File NewFolder = new File("src\\DataBase\\Products");
boolean s = NewFolder.mkdir();
String Destination = NewFolder.getAbsolutePath() + File.separator + "Product1.jpg";

try {
    
    FileChannel Source = new FileInputStream(Path).getChannel();
    FileChannel destination = new FileOutputStream(Destination).getChannel();
    destination.transferFrom(Source, 0, Source.size());

   
    Source.close();
    destination.close();

} catch (IOException e) {
    e.printStackTrace();
} 
        
    if (ProductNameText.getText().isEmpty() ||StockText.getText().isEmpty() ||
                DiscriptionText.getText().isEmpty()  ||PriceTagText.getText().isEmpty() ){
            
             JOptionPane.showMessageDialog(null, "One of the Required fields is empty please fill it in");
            
        }else{
        
        
            
       
        String Name = ProductNameText.getText().trim();
        String Stock = StockText.getText();
        String price = PriceTagText.getText().trim();
        String Discription = DiscriptionText.getText();
      
     
      
            
       
        
       
        Products product = new Products(Name,Stock,price,Discription);
        
        products.add(product);
        reserved++;
        saveProductsToFile();
        
        
        }         
             
        
        
        
 
        
      



break;

 case 2:
      
         JOptionPane.showMessageDialog(null, "Please Upload A photo for the product in JPG format only");
         
                 
JFileChooser F2 = new JFileChooser();
int result2 = F2.showOpenDialog(null);

if (result2 != JFileChooser.APPROVE_OPTION) {
    System.exit(0);
}

String Path2 = F2.getSelectedFile().getAbsolutePath();


File NewFolder2 = new File("src\\DataBase\\Products");
boolean s2 = NewFolder2.mkdir();
String Destination2 = NewFolder2.getAbsolutePath() + File.separator + "Product2.jpg";

try {
    
    FileChannel Source = new FileInputStream(Path2).getChannel();
    FileChannel destination = new FileOutputStream(Destination2).getChannel();
    destination.transferFrom(Source, 0, Source.size());

  
    Source.close();
    destination.close();

} catch (IOException e) {
    e.printStackTrace();
}    
         
    if (ProductNameText.getText().isEmpty() ||StockText.getText().isEmpty() ||
                DiscriptionText.getText().isEmpty()  ||PriceTagText.getText().isEmpty() ){
            
             JOptionPane.showMessageDialog(null, "One of the Required fields is empty please fill it in");
            
        }else{
        
        
            
       
        String Name = ProductNameText.getText().trim();
        String Stock = StockText.getText();
        String price = PriceTagText.getText().trim();
        String Discription = DiscriptionText.getText();
      
     
      
            
       
        
       
        Products product = new Products(Name, Stock,price,Discription);
        
        products.add(product);
        reserved++;
        saveProductsToFile();
        
        
        }         
             
        
        
        
 
   



break;

 case 3:
      
         JOptionPane.showMessageDialog(null, "Please Upload A photo for the product in JPG format only");
         
                 
JFileChooser F3 = new JFileChooser();
int result3 = F3.showOpenDialog(null);

if (result3 != JFileChooser.APPROVE_OPTION) {
    System.exit(0);
}

String Path3 = F3.getSelectedFile().getAbsolutePath();


File NewFolder3 = new File("src\\DataBase\\Products");
boolean s3 = NewFolder3.mkdir();
String Destination3 = NewFolder3.getAbsolutePath() + File.separator + "Product3.jpg";

try {
    
    FileChannel Source = new FileInputStream(Path3).getChannel();
    FileChannel destination = new FileOutputStream(Destination3).getChannel();
    destination.transferFrom(Source, 0, Source.size());

   
    Source.close();
    destination.close();

} catch (IOException e) {
    e.printStackTrace();
}   
         
    if (ProductNameText.getText().isEmpty() ||StockText.getText().isEmpty() ||
                DiscriptionText.getText().isEmpty()  ||PriceTagText.getText().isEmpty() ){
            
             JOptionPane.showMessageDialog(null, "One of the Required fields is empty please fill it in");
            
        }else{
        
        
            
       
        String Name = ProductNameText.getText().trim();
        String Stock = StockText.getText();
        String price = PriceTagText.getText().trim();
        String Discription = DiscriptionText.getText();
      
     
      
            
       
        
       
        Products product = new Products(Name, Stock,price,Discription);
        
        products.add(product);
        reserved++;
        saveProductsToFile();
        
        
        }         
             
        
        
        
 
    



break;

 case 4:
      
         JOptionPane.showMessageDialog(null, "Please Upload A photo for the product in JPG format only");
         
         
         JFileChooser F4 = new JFileChooser();
int result4 = F4.showOpenDialog(null);

if (result4 != JFileChooser.APPROVE_OPTION) {
    System.exit(0);
}

String Path4 = F4.getSelectedFile().getAbsolutePath();


File NewFolder4 = new File("src\\DataBase\\Products");
boolean s4 = NewFolder4.mkdir();
String Destination4 = NewFolder4.getAbsolutePath() + File.separator + "Product4.jpg";

try {
    
    FileChannel Source = new FileInputStream(Path4).getChannel();
    FileChannel destination = new FileOutputStream(Destination4).getChannel();
    destination.transferFrom(Source, 0, Source.size());

   
    Source.close();
    destination.close();

} catch (IOException e) {
    e.printStackTrace();
}   


    if (ProductNameText.getText().isEmpty() ||StockText.getText().isEmpty() ||
                DiscriptionText.getText().isEmpty()  ||PriceTagText.getText().isEmpty() ){
            
             JOptionPane.showMessageDialog(null, "One of the Required fields is empty please fill it in");
            
        }else{
        
        
            
       
        String Name = ProductNameText.getText().trim();
        String Stock = StockText.getText();
        String price = PriceTagText.getText().trim();
        String Discription = DiscriptionText.getText();
      
     
      
            
       
        
       
        Products product = new Products(Name, Stock,price,Discription);
        
        products.add(product);
        reserved++;
        saveProductsToFile();
        
        
        }         
             
        
        
        
 
        
    



break;

 case 5:
     
       JOptionPane.showMessageDialog(null, "Please Upload A photo for the product in JPG format only");
        
       JFileChooser F5 = new JFileChooser();
int result5 = F5.showOpenDialog(null);

if (result5 != JFileChooser.APPROVE_OPTION) {
    System.exit(0);
}

String Path5 = F5.getSelectedFile().getAbsolutePath();


File NewFolder5 = new File("src\\DataBase\\Products");
boolean s5 = NewFolder5.mkdir();
String Destination5 = NewFolder5.getAbsolutePath() + File.separator + "Product5.jpg";

try {
    
    FileChannel Source = new FileInputStream(Path5).getChannel();
    FileChannel destination = new FileOutputStream(Destination5).getChannel();
    destination.transferFrom(Source, 0, Source.size());

   
    Source.close();
    destination.close();

} catch (IOException e) {
    e.printStackTrace();
}    
    if (ProductNameText.getText().isEmpty() ||StockText.getText().isEmpty() ||
                DiscriptionText.getText().isEmpty()  ||PriceTagText.getText().isEmpty() ){
            
             JOptionPane.showMessageDialog(null, "One of the Required fields is empty please fill it in");
            
        }else{
        
        
            
       
        String Name = ProductNameText.getText().trim();
        String Stock = StockText.getText();
        String price = PriceTagText.getText().trim();
        String Discription = DiscriptionText.getText();
      
     
      
            
       
        
       
        Products product = new Products(Name, Stock,price,Discription);
        
        products.add(product);
        reserved++;
        saveProductsToFile();
        
        
        }         
             
        
        
        
 
        
   



break;

 case 6:
     
      JOptionPane.showMessageDialog(null, "Please Upload A photo for the product in JPG format only");
      
              
JFileChooser F6 = new JFileChooser();
int result6 = F6.showOpenDialog(null);

if (result6 != JFileChooser.APPROVE_OPTION) {
    System.exit(0);
}

String Path6 = F6.getSelectedFile().getAbsolutePath();


File NewFolder6 = new File("src\\DataBase\\Products");
boolean s6 = NewFolder6.mkdir();
String Destination6 = NewFolder6.getAbsolutePath() + File.separator + "Product6.jpg";

try {
    
    FileChannel Source = new FileInputStream(Path6).getChannel();
    FileChannel destination = new FileOutputStream(Destination6).getChannel();
    destination.transferFrom(Source, 0, Source.size());

  
    Source.close();
    destination.close();

} catch (IOException e) {
    e.printStackTrace();
}       

      
        
    if (ProductNameText.getText().isEmpty() ||StockText.getText().isEmpty() ||
                DiscriptionText.getText().isEmpty()  ||PriceTagText.getText().isEmpty() ){
            
             JOptionPane.showMessageDialog(null, "One of the Required fields is empty please fill it in");
            
        }else{
        
        
            
       
        String Name = ProductNameText.getText().trim();
        String Stock = StockText.getText();
        String price = PriceTagText.getText().trim();
        String Discription = DiscriptionText.getText();
      
     
      
            
       
        
       
        Products product = new Products(Name, Stock,price,Discription);
        
        products.add(product);
        reserved++;
        saveProductsToFile();
        
        
        }         
             
        
        
        
 



break;


default:
    
    JOptionPane.showMessageDialog(null, "there is no space reserved left");

    }
    }//GEN-LAST:event_EnlistActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
     
        
            
 try
        {
        
            FileInputStream file = new FileInputStream("src\\DataBase\\Products.dat");
            ObjectInputStream inputFile = new ObjectInputStream(file);
        
        FileWriter fw6=new FileWriter("src\\DataBase\\ProductsData.txt");  
        
        
       for (int i=0;i<products.size();i++){
           
            try 
            {
              
                   fw6.write( "\n" + products.get(i).getName()+"\n" + products.get(i).getPrice() + "\n" + products.get(i).getStock()+ "\n" + products.get(i).getDiscription()+ "\n" );
                  
            }
            catch (Exception f)
            {
             JOptionPane.showMessageDialog(null, f.getMessage());
            }
          
        }
        fw6.close();  
       
        inputFile.close();
        }
        catch (IOException e){
            
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
 
         try  
{  

File f = new File("src\\DataBase\\ProductsData.txt");   
if(!Desktop.isDesktopSupported())
{  
System.out.println("aint working");  
return;  
}  
Desktop desktop = Desktop.getDesktop();  
if(f.exists())        
desktop.open(f);              
}  
catch(Exception e)  
{  
e.printStackTrace();  
}  
    
    }//GEN-LAST:event_viewActionPerformed

    private void DiscriptionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscriptionTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DiscriptionTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnlistingProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnlistingProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnlistingProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnlistingProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnlistingProducts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DiscriptionText;
    private javax.swing.JButton Enlist;
    private javax.swing.JTextField PriceTagText;
    private javax.swing.JTextField ProductNameText;
    private javax.swing.JTextField StockText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
